<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://mwfogleman.github.io/' rel='self' type='application/rss+xml'/>
<generator>
clj-rss
</generator>
<title>
rejoyce
</title>
<link>
http://mwfogleman.github.io/
</link>
<description>
Statements and questions about technologies
</description>
<lastBuildDate>
Mon, 22 Dec 2014 11:57:10 -0500
</lastBuildDate>
<author>
Michael Fogleman
</author>
<item>
<guid>
http://mwfogleman.github.io/posts/20-12-2014-flatcat.html
</guid>
<link>
http://mwfogleman.github.io/posts/20-12-2014-flatcat.html
</link>
<title>
A few implementations of flatten
</title>
<description>
&lt;p&gt;&lt;img src=&quot;/files/sting-the-setup.jpg&quot; alt=&quot;The Set-up&quot; /&gt;&lt;/p&gt;&lt;p&gt;Yesterday, a friend challenged me to reimplement flatten in Clojure.&lt;/p&gt;&lt;p&gt;In case you've never used flatten before, it takes a sequence that may have nested sequences inside of it, and returns a sequence with no sequences inside. Here's what it looks like in action:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def simplest-possible-case '&amp;#40;1 2 &amp;#40;3&amp;#41; 4 5&amp;#41;&amp;#41;
&amp;#40;flatten simplest-possible-case&amp;#41;
; =&amp;gt; '&amp;#40;1 2 3 4 5&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href='https://www.youtube.com/watch?v=Lh8dcvj-0NA'&gt;Ya folla?&lt;/a&gt;&lt;/p&gt;&lt;p&gt;My initial goal was to reproduce the The Little Schemer's recursive solution. However, I had a few problems. First, I had forgotten the book's &quot;Fourth Commandment,&quot; namely to plan for a termination condition / base case.&lt;/p&gt;&lt;p&gt;Once I remembered that I needed a base case, I was still a little confused. In the Scheme solution, if you've hit something that is an empty list, you return an empty list-- without calling the flatten function again. All of the other items can cons onto that empty list.&lt;/p&gt;&lt;p&gt;For some reason, I had thought that Clojure's &lt;a href='http://clojure.org/lisps'&gt;differences with other Lisps&lt;/a&gt; would prevent me from consing onto an empty list. This is not the case: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;cons 4 '&amp;#40;&amp;#41;&amp;#41;
&amp;#40;cons 4 &amp;#91;&amp;#93;&amp;#41;
&amp;#40;cons 4 nil&amp;#41;
;; =&amp;gt; &amp;#40;4&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These all return the same result, and so any of them would work. But using nil as the base case's return value is the most idiomatic Clojure solution.&lt;/p&gt;&lt;p&gt;So there are three cases: you have an empty list, you have something (an atom), or you have a non-empty list. The first is the base case, and we know how to handle that: return nil.&lt;/p&gt;&lt;p&gt;Usually, a Scheme solution for checking the other cases uses an atom? or a (not (pair? x)) function. There isn't an atom? function in Clojure, so I made one:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def atom? &amp;#40;complement sequential?&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Now we can make a Scheme-esque solution.&lt;pre&gt;&lt;code&gt;&amp;#40;defn flat
  &amp;#91;s&amp;#93;
  &amp;#40;let &amp;#91;f &amp;#40;first s&amp;#41;
        r &amp;#40;rest s&amp;#41;&amp;#93;
    &amp;#40;cond &amp;#40;empty? s&amp;#41; nil
          &amp;#40;atom? f&amp;#41; &amp;#40;cons f &amp;#40;flat r&amp;#41;&amp;#41;
          ;; &amp;#40;sequential? f&amp;#41;
          :else &amp;#40;concat &amp;#40;flat f&amp;#41; &amp;#40;flat r&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This gets the job done. Still, I knew I wasn't making the most out of Clojure's core functions.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/files/sting-the-crew.jpg&quot; alt=&quot;The Crew&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://rosettacode.org/'&gt;Rosetta Code&lt;/a&gt; is a website that lists many standard programming tasks and puzzles, including &lt;a href='http://rosettacode.org/wiki/Flatten&amp;#95;a&amp;#95;list'&gt;flattening a list&lt;/a&gt;, and then lists solutions in many languages. Here's what it has for Clojure:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn flat &amp;#91;coll&amp;#93;
  &amp;#40;lazy-seq
    &amp;#40;when-let &amp;#91;s &amp;#40;seq coll&amp;#41;&amp;#93;
      &amp;#40;if &amp;#40;coll? &amp;#40;first s&amp;#41;&amp;#41;
        &amp;#40;concat &amp;#40;flat &amp;#40;first s&amp;#41;&amp;#41; &amp;#40;flat &amp;#40;rest s&amp;#41;&amp;#41;&amp;#41;
        &amp;#40;cons &amp;#40;first s&amp;#41; &amp;#40;flat &amp;#40;rest s&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Just like a sly con man or a Hollywood actor, this solution is pretty handsome. It's a lazy-seq; it uses a &lt;a href='https://github.com/bbatsov/clojure-style-guide#when-let'&gt;when-let&lt;/a&gt; / &lt;a href='https://github.com/bbatsov/clojure-style-guide#nil-punning'&gt;seq&lt;/a&gt; combo to take care of the base case, and wraps everything else into a concise if statement.&lt;/p&gt;&lt;p&gt;It does have one bug: by using coll? instead of sequential?, it will behave strangely when a sequence contains something like a map, which is a collection but not a sequence. In particular, calling this function on '({:a 3}) will return an empty list.&lt;/p&gt;&lt;p&gt;Even after fixing that problem, the truth has to come out: Clojure core has a different solution, which we simply have to give a scratch of our noses to.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/files/sting-the-nose.jpg&quot; alt=&quot;The nose-touch&quot; /&gt;&lt;/p&gt;&lt;p&gt;Hickey &amp; co. use a function called &lt;a href='http://conj.io/store/org.clojure/clojure/1.7.0-alpha4/clojure.core/tree-seq/'&gt;tree-seq&lt;/a&gt;, to implement flatten. If you're like me, you've never even seen it before. Still, its name is a big clue.&lt;/p&gt;&lt;p&gt;The main idea is to think of flatten not just in terms of recursion, but in terms of a tree. You pass flatten a tree-like sequence, and you expect it to return the &quot;leaves&quot; of that tree.&lt;/p&gt;&lt;p&gt;Here's the source of tree-seq:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn tree-seq
  &amp;#91;branch? children root&amp;#93;
  &amp;#40;let &amp;#91;walk &amp;#40;fn walk &amp;#91;node&amp;#93;
               &amp;#40;lazy-seq
                &amp;#40;cons node
                      &amp;#40;when &amp;#40;branch? node&amp;#41;
                        &amp;#40;mapcat walk &amp;#40;children node&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#93;
    &amp;#40;walk root&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tree-seq takes three arguments: a predicate function, a function, and a sequence. These parameters are called branch?, children, and root.&lt;/p&gt;&lt;p&gt;The first value in the lazy-sequence is the input value. Then we check if the input value is a branch with the branch? predicate. If it is, we call the children function on it to get its children, and keep &quot;walking&quot; the function recursively. If it isn't, return nil, so that the highest level of the recursive calls can return a sensible list.&lt;/p&gt;&lt;p&gt;So tree-seq returns all of the branches and all of the leaves, as determined by the branch? and children functions. In flatten, we are expecting a sequence of sequences; thus, the branch? predicate is sequential, and the children function is seq. (We'll get to the rest of its source in a moment.) You'll recognize that both of these were used in the other flatten solutions.&lt;/p&gt;&lt;p&gt;Let's look at the result of calling tree-seq with sequential?, seq, and our simplest possible case:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def result &amp;#40;tree-seq sequential? seq simplest-possible-case&amp;#41;&amp;#41;
result
; =&amp;gt; &amp;#40;&amp;#40;1 2 &amp;#40;3&amp;#41; 4 5&amp;#41; 1 2 &amp;#40;3&amp;#41; 3 4 5&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Woah! That result looks a little weird, and it sure isn't flat. But it does look like all of the branches (including the input value), and all of the leaves.&lt;/p&gt;&lt;p&gt;With flatten, we just want the leaves, or all the atoms. So this would be the obvious thing to do:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;filter atom? result&amp;#41;
; =&amp;gt; &amp;#40;1 2 3 4 5&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That works great! But since we know that the very first item in the list will be the un-flattened input value, we can call rest on the result first, without losing any leaves:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;filter atom? &amp;#40;rest result&amp;#41;&amp;#41;
; =&amp;gt; &amp;#40;1 2 3 4 5&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Same return value, but this is presumably more efficient. And that, my friends, is how Hickey &amp; co. implement flatten!:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn flatten &amp;#91;x&amp;#93;
  &amp;#40;filter &amp;#40;complement sequential?&amp;#41;
          &amp;#40;rest &amp;#40;tree-seq sequential? seq x&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Aw yeah!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/files/sting-success.jpg&quot; alt=&quot;Success!&quot; /&gt;&lt;/p&gt;&lt;p&gt;What else could we use tree-seq for? At this point, it should be pretty easy to implement a function that is the opposite of flatten:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn branches &amp;#91;x&amp;#93; &amp;#40;filter sequential? &amp;#40;tree-seq sequential? seq x&amp;#41;&amp;#41;&amp;#41;

&amp;#40;branches simplest-possible-case&amp;#41;
; =&amp;gt; &amp;#40;&amp;#40;1 2 &amp;#40;3&amp;#41; 4 5&amp;#41; &amp;#40;3&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It's not immediately obvious to me what you might use that for. I did think of another use of tree-seq that might actually come in handy: finding all of the values in a series of nested maps. Here's how:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def nested-map {:a {:b {:c {:d 4}}} :e {:f 6}}&amp;#41;

&amp;#40;defn all-vals 
  &amp;#91;m&amp;#93;
  &amp;#40;remove map? &amp;#40;rest &amp;#40;tree-seq map? vals m&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;all-vals nested-map&amp;#41;
; =&amp;gt; &amp;#40;6 4&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we've read and evaluated several solutions of flatten, including Clojure core's solution. And we have a new Clojure core function under our belts.&lt;/p&gt;&lt;p&gt;You might be interested in checking out &lt;a href='crossclj.info/fun/clojure.core/tree-seq.html'&gt;some other uses of tree-seq&lt;/a&gt;. It's used in two other core Clojure functions, and a handful of libraries. And who knows! You or I might make one of those libraries one day.&lt;/p&gt;&lt;p&gt;One last thing: it's true that flatten and tree-seq are unrelated to that wonderful film &quot;The Sting.&quot; But the real Sting is that all of this came about by way of trying to solve Lewis Carroll's / Carin Meier's &quot;&lt;a href='https://github.com/gigasquid/wonderland-clojure-katas/tree/master/doublets'&gt;Doublets&lt;/a&gt;&quot; kata, and I have yet to solve it.&lt;/p&gt;&lt;p&gt;Perhaps my friend is right, though, and thinking about flatten will help a solution emerge...&lt;/p&gt;
</description>
<pubDate>
Sat, 20 Dec 2014 00:00:00 -0500
</pubDate>
<author>
Michael Fogleman
</author>
</item>
<item>
<guid>
http://mwfogleman.github.io/posts/20-12-2014-first-post.html
</guid>
<link>
http://mwfogleman.github.io/posts/20-12-2014-first-post.html
</link>
<title>
First post
</title>
<description>
&lt;p&gt;This is my first post in my new technical blog, &quot;rejoyce.&quot; I'm a real coder now that I have one of these things!&lt;/p&gt;&lt;p&gt;In case it's not obvious, I'm using the swanky new static blog generator, &lt;a href='https://lacarmen.github.io/cryogen/index.html'&gt;Cryogen&lt;/a&gt;. I haven't (yet) figured out much about how to theme these darn &quot;web-page&quot; things you new-fangled kids have dreamed up. But having nothing fancy to wear is no excuse to skip a party, so here I am.&lt;/p&gt;&lt;p&gt;Be sure to check out the &quot;About&quot; page for some clues as to what I'll be posting about (hint: this hint has parentheses in it).&lt;/p&gt;
</description>
<pubDate>
Sat, 20 Dec 2014 00:00:00 -0500
</pubDate>
<author>
Michael Fogleman
</author>
</item>
</channel>
</rss>
