<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://mwfogleman.github.io/' rel='self' type='application/rss+xml'/>
<generator>
clj-rss
</generator>
<title>
rejoyce
</title>
<link>
http://mwfogleman.github.io/
</link>
<description>
Statements and questions about technologies
</description>
<lastBuildDate>
Mon, 29 Dec 2014 19:55:18 -0500
</lastBuildDate>
<author>
Michael Fogleman
</author>
<item>
<guid>
http://mwfogleman.github.io/posts/29-12-2014-a-year-of-emacs.html
</guid>
<link>
http://mwfogleman.github.io/posts/29-12-2014-a-year-of-emacs.html
</link>
<title>
2014: A Year of Emacs
</title>
<description>
&lt;p&gt;My Emacs &quot;birthday&quot; is January 21, 2014. That's right-- I just started using Emacs this year! While it's not quite my one-year birthday, I thought I'd take advantage of the annual review blogging tradition to do a retrospective on my first year in Emacs. Note: much of the following chronology takes place during an extended romp through Asia.&lt;/p&gt;&lt;p&gt;I installed Arch Linux in the Fall of 2013. When using Linux, you often need to edit configuration files. The friend who helped me set me up with Vim. I learned the basics--how to insert, save, and quit--and not much else.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/files/seattle&amp;#95;arch.jpg&quot; alt=&quot;Arch on a bench&quot; /&gt;&lt;/p&gt;&lt;p&gt;In January, I decided it might be fun to give Emacs a try. Here is a picture of Marina Bay in Singapore, taken just before or while I did the Emacs tutorial:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/files/singapore&amp;#95;emacs.jpg&quot; alt=&quot;Marina Bay in Singapore, just before or during my Emacs birth&quot; /&gt;&lt;/p&gt;&lt;p&gt;As a life-long user of keyboard shortcuts, I appreciated Emacs' notation for key bindings. The tutorial begins with basic cursor controls; easy enough, but nothing exciting. I could see the line, sentence, and buffer equivalents being useful. But my jaw dropped when it taught me C-t, transpose-chars. I knew that mastering just that command would probably save me a lot of pain and typos, and that was probably the least of what Emacs could do.&lt;/p&gt;&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/hashtag/Emacs?src=hash&quot;&gt;#Emacs&lt;/a&gt;: using transpose-chars is a litmus test. If you care enough to save keystrokes to internalize C-t, then you must be a power user.&lt;/p&gt;&amp;mdash; Fredrik Appelberg (@appelberg) &lt;a href=&quot;https://twitter.com/appelberg/status/538282100911529984&quot;&gt;November 28, 2014&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;While the Emacs tutorial probably isn't meant to take more than an hour or two on the first try, it took me probably twice as long. This was because I made &lt;a href='http://ankisrs.net/'&gt;Anki&lt;/a&gt; cards. Some people say that Emacs' learning curve is steep. For myself, I've found Emacs' learning curve to be gentle, but (pleasantly) endless. Then again, it was probably making Anki cards that made the learning curve less steep for me.&lt;/p&gt;&lt;p&gt;A variation of this card was probably one of my first Emacs cards:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://books.google.com/books?id=eoI7dNY1d0YC&amp;printsec=frontcover&amp;dq=learning+gnu+emacs&amp;hl=en&amp;sa=X&amp;ei=EcWhVLq1CIbQggTWhYKYCw&amp;ved=0CB8Q6AEwAA#v=onepage&amp;q=most%20common%20typo&amp;f=false&quot;&gt; &lt;img src=&quot;/files/c-t1.png&quot; alt=&quot;Anki card: transpose-chars 1&quot; /&gt; &lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://en.wikipedia.org/wiki/Cloze&amp;#95;test'&gt;Cloze&lt;/a&gt; &lt;a href='http://www.supermemo.com/articles/20rules.htm'&gt;deletion&lt;/a&gt; &lt;a href='http://ankisrs.net/docs/manual.html#cloze-deletion'&gt;cards&lt;/a&gt; like this one are very convenient for this kind of thing. One reason is that it's easy to add &lt;a href='https://twitter.com/camdez/status/543953065645076481'&gt;new, related information&lt;/a&gt; later:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/camdez/status/543953065645076481&quot;&gt; &lt;img src=&quot;/files/c-t2.png&quot; alt=&quot;Anki cards transpose-chars 2&quot; /&gt; &lt;/a&gt;&lt;/p&gt;&lt;p&gt;In February, the battery on my little Arch laptop died. I spent most of the month without a laptop, waiting for a new battery to arrive by mail. I borrowed my friend and travel partner's machine to review my Anki cards. Still, I did manage to have a little time to develop my Emacs-fu.&lt;/p&gt;&lt;p&gt;In Hanoi, the hotel room we stayed in had a (virus-ridden) Windows machine. What else could I do but install Emacs? At this time, my Emacs configuration was not that complex, so it wasn't worth adapting. As it turned out, that time with a bare Emacs proved especially helpful for mastering some of the key Emacs concepts that I hadn't quite made use of yet; in particular, I got the hang of using multiple buffers in one session. By the the end of February, my new battery had arrived, and I was back in the Emacs saddle. &lt;/p&gt;&lt;p&gt;In March, I converted my &lt;a href='https://github.com/mwfogleman/config/blob/master/home/.emacs.d/michael.org'&gt;my Emacs configuration&lt;/a&gt; to an Org-literate format, and started tracking it with Git. This was really the first project that I used Git for, and it gave me an opportunity to learn Git.&lt;/p&gt;&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;Thank you Magit for teaching me git &lt;a href=&quot;https://twitter.com/hashtag/emacs4life?src=hash&quot;&gt;#emacs4life&lt;/a&gt;&lt;/p&gt;&amp;mdash; ionrock (@ionrock) &lt;a href=&quot;https://twitter.com/ionrock/status/547076969754415104&quot;&gt;December 22, 2014&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/Script&gt;&lt;/p&gt;&lt;p&gt;The other highlight of March was starting to learn a little Elisp. I found Robert Chassell's &quot;&lt;a href='https://www.gnu.org/software/emacs/manual/html&amp;#95;node/eintr/index.html'&gt;An Introduction to Programming in Emacs Lisp&lt;/a&gt;&quot; especially helpful. Chassell's overview and Org-mode's fantastic documentation helped me to &lt;a href='https://twitter.com/mwfogleman/status/442611399206789120'&gt;write&lt;/a&gt; my first significant piece of Elisp (some org-capture templates).&lt;/p&gt;&lt;p&gt;April started off with a bang when my Emacs configuration was &lt;a href='http://jtnimoy.com/blogs/projects/14881671'&gt;featured in a major motion picture, Tron Legacy&lt;/a&gt;. But that wasn't nearly as exciting as making my first major mode, &lt;a href='https://github.com/mwfogleman/tid-mode'&gt;tid-mode&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In late June, Artur Malabarba launched his Emacs blog, Endless Parentheses. One of his early posts was about &lt;a href='http://endlessparentheses.com/hungry-delete-mode.html'&gt;hungry-delete&lt;/a&gt;. I was excited about it, but found that it did not work with transient-mark-mode. Artur encouraged me to write a fix. I was very excited when Nathaniel Flath, the maintainer, agreed to merge my patches into hungry-delete. At about the same time, Artur &lt;a href='http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html'&gt;posted an adapted version of my narrow-or-widen-dwim function to Endless Parentheses&lt;/a&gt;. Sacha Chua, Nathaniel Flath, and some other Emacs Lisp hackers also offered suggestions.&lt;/p&gt;&lt;p&gt;At the end of July, I started learning Clojure, and added an initial CIDER configuration. While reading the Clojure Cookbook, I decided to hack out &lt;a href='https://github.com/clojure-cookbook/clojure-cookbook#exploring-the-book'&gt;a function that turned the pages&lt;/a&gt;. Ryan Neufeld, one of the co-authors, merged my pull request, and a while later, I saw my function mentioned on Planet Clojure.&lt;/p&gt;&lt;p&gt;In October, I purchased a Mac for a Clojure contracting job. (Knowing Emacs helped me get the job!) Adding the :ensure keyword to my use-package declarations made the Emacs configuration portion of my OS X set-up process near-instant and pain-free. It was a really cool feeling to be using the same Emacs configuration on two different machines. By the end of the month, both were running on the newly-released Emacs 24.4.&lt;/p&gt;&lt;p&gt;Once Emacs 24.4 was out, Artur posted &lt;a href='http://endlessparentheses.com/big-things-to-expect-from-emacs-25.html'&gt;an Emacs 25 wishlist&lt;/a&gt; to Endless Parentheses. I responded with this tweet:&lt;/p&gt;&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/hashtag/Emacs?src=hash&quot;&gt;#Emacs&lt;/a&gt; 25 wishlist: putting people like @bruceconnor &lt;a href=&quot;https://twitter.com/&lt;i&gt;wilfredh&quot;&gt;@&lt;/i&gt;wilfredh&lt;/a&gt; &lt;a href=&quot;https://twitter.com/sachac&quot;&gt;@sachac&lt;/a&gt; &lt;a href=&quot;https://twitter.com/sanityinc&quot;&gt;@sanityinc&lt;/a&gt; &lt;a href=&quot;https://twitter.com/nicferrier&quot;&gt;@nicferrier&lt;/a&gt; all in one room for a hackathon...&lt;/p&gt;&amp;mdash; Michael Fogleman (@mwfogleman) &lt;a href=&quot;https://twitter.com/mwfogleman/status/527430311836418048&quot;&gt;October 29, 2014&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;This tweet indirectly led to the happy occasion of the &lt;a href='http://sachachua.com/blog/2014/10/emacs-hangout-notes/'&gt;Emacs Hangouts&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;That just about brings us to this post. In retrospect, I can't believe it's been less than a year, or that I've learned so much. Thanks to everyone who has helped me so far on the endless path of mastering Emacs, especially Ben, Eric, Sacha Chua, Artur Malabarba, and Bozhidar Batsov.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Monomyth&quot;&gt; &lt;img src=&quot;/files/emacs&amp;#95;monomyth.png&quot; alt=&quot;Joseph Campbell was a Lisp guru&quot; /&gt; &lt;/a&gt;&lt;/p&gt;&lt;p&gt;I want to close this post out with Sacha's tweet about 2015:&lt;/p&gt;&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;What are your Emacs resolutions? In 2015, I want to get the hang of refactoring, syntactical editing, dynamic autocompletion, and testing.&lt;/p&gt;&amp;mdash; Sacha Chua (@sachac) &lt;a href=&quot;https://twitter.com/sachac/status/544676125478096897&quot;&gt;December 16, 2014&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Like Sacha, I want to learn how to write and run tests in Emacs. I want to learn more about org-mode's features and possible workflows. More broadly, I'd like to make more posts about Emacs, and find other ways to contribute to the Emacs community. I'd like to &lt;a href='http://lars.ingebrigtsen.no/2014/11/13/welcome-new-emacs-developers/'&gt;learn more about Emacs core development&lt;/a&gt;. In terms of contrib, I'd like to help accelerate the &lt;a href='https://github.com/magit/magit/issues/1645'&gt;release&lt;/a&gt; of Magit's &lt;a href='https://github.com/magit/magit/tree/next'&gt;&quot;next&quot; branch&lt;/a&gt;. Above all, I'm sure I'll keep tweaking my configuration.&lt;/p&gt;
</description>
<pubDate>
Mon, 29 Dec 2014 00:00:00 -0500
</pubDate>
<author>
Michael Fogleman
</author>
</item>
<item>
<guid>
http://mwfogleman.github.io/posts/20-12-2014-flatcat.html
</guid>
<link>
http://mwfogleman.github.io/posts/20-12-2014-flatcat.html
</link>
<title>
A few implementations of flatten
</title>
<description>
&lt;p&gt;&lt;img src=&quot;/files/sting-the-setup.jpg&quot; alt=&quot;The Set-up&quot; /&gt;&lt;/p&gt;&lt;p&gt;Yesterday, a friend challenged me to reimplement flatten in Clojure.&lt;/p&gt;&lt;p&gt;In case you've never used flatten before, it takes a sequence that may have nested sequences inside of it, and returns a sequence with no sequences inside. Here's what it looks like in action:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def simplest-possible-case '&amp;#40;1 2 &amp;#40;3&amp;#41; 4 5&amp;#41;&amp;#41;
&amp;#40;flatten simplest-possible-case&amp;#41;
; =&amp;gt; '&amp;#40;1 2 3 4 5&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href='https://www.youtube.com/watch?v=Lh8dcvj-0NA'&gt;Ya folla?&lt;/a&gt;&lt;/p&gt;&lt;p&gt;My initial goal was to reproduce the The Little Schemer's recursive solution. However, I had a few problems. First, I had forgotten the book's &quot;Fourth Commandment,&quot; namely to plan for a termination condition / base case.&lt;/p&gt;&lt;p&gt;Once I remembered that I needed a base case, I was still a little confused. In the Scheme solution, if you've hit something that is an empty list, you return an empty list-- without calling the flatten function again. All of the other items can cons onto that empty list.&lt;/p&gt;&lt;p&gt;For some reason, I had thought that Clojure's &lt;a href='http://clojure.org/lisps'&gt;differences with other Lisps&lt;/a&gt; would prevent me from consing onto an empty list. This is not the case: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;cons 4 '&amp;#40;&amp;#41;&amp;#41;
&amp;#40;cons 4 &amp;#91;&amp;#93;&amp;#41;
&amp;#40;cons 4 nil&amp;#41;
;; =&amp;gt; &amp;#40;4&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These all return the same result, and so any of them would work. But using nil as the base case's return value is the most idiomatic Clojure solution.&lt;/p&gt;&lt;p&gt;So there are three cases: you have an empty list, you have something (an atom), or you have a non-empty list. The first is the base case, and we know how to handle that: return nil.&lt;/p&gt;&lt;p&gt;Usually, a Scheme solution for checking the other cases uses an atom? or a (not (pair? x)) function. There isn't an atom? function in Clojure, so I made one:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def atom? &amp;#40;complement sequential?&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;Now we can make a Scheme-esque solution.&lt;pre&gt;&lt;code&gt;&amp;#40;defn flat
  &amp;#91;s&amp;#93;
  &amp;#40;let &amp;#91;f &amp;#40;first s&amp;#41;
        r &amp;#40;rest s&amp;#41;&amp;#93;
    &amp;#40;cond &amp;#40;empty? s&amp;#41; nil
          &amp;#40;atom? f&amp;#41; &amp;#40;cons f &amp;#40;flat r&amp;#41;&amp;#41;
          ;; &amp;#40;sequential? f&amp;#41;
          :else &amp;#40;concat &amp;#40;flat f&amp;#41; &amp;#40;flat r&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This gets the job done. Still, I knew I wasn't making the most out of Clojure's core functions.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/files/sting-the-crew.jpg&quot; alt=&quot;The Crew&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://rosettacode.org/'&gt;Rosetta Code&lt;/a&gt; is a website that lists many standard programming tasks and puzzles, including &lt;a href='http://rosettacode.org/wiki/Flatten&amp;#95;a&amp;#95;list'&gt;flattening a list&lt;/a&gt;, and then lists solutions in many languages. Here's what it has for Clojure:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn flat &amp;#91;coll&amp;#93;
  &amp;#40;lazy-seq
    &amp;#40;when-let &amp;#91;s &amp;#40;seq coll&amp;#41;&amp;#93;
      &amp;#40;if &amp;#40;coll? &amp;#40;first s&amp;#41;&amp;#41;
        &amp;#40;concat &amp;#40;flat &amp;#40;first s&amp;#41;&amp;#41; &amp;#40;flat &amp;#40;rest s&amp;#41;&amp;#41;&amp;#41;
        &amp;#40;cons &amp;#40;first s&amp;#41; &amp;#40;flat &amp;#40;rest s&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Just like a sly con man or a Hollywood actor, this solution is pretty handsome. It's a lazy-seq; it uses a &lt;a href='https://github.com/bbatsov/clojure-style-guide#when-let'&gt;when-let&lt;/a&gt; / &lt;a href='https://github.com/bbatsov/clojure-style-guide#nil-punning'&gt;seq&lt;/a&gt; combo to take care of the base case, and wraps everything else into a concise if statement.&lt;/p&gt;&lt;p&gt;It does have one bug: by using coll? instead of sequential?, it will behave strangely when a sequence contains something like a map, which is a collection but not a sequence. In particular, calling this function on '({:a 3}) will return an empty list.&lt;/p&gt;&lt;p&gt;Even after fixing that problem, the truth has to come out: Clojure core has a different solution, which we simply have to give a scratch of our noses to.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/files/sting-the-nose.jpg&quot; alt=&quot;The nose-touch&quot; /&gt;&lt;/p&gt;&lt;p&gt;Hickey &amp; co. use a function called &lt;a href='http://conj.io/store/org.clojure/clojure/1.7.0-alpha4/clojure.core/tree-seq/'&gt;tree-seq&lt;/a&gt;, to implement flatten. If you're like me, you've never even seen it before. Still, its name is a big clue.&lt;/p&gt;&lt;p&gt;The main idea is to think of flatten not just in terms of recursion, but in terms of a tree. You pass flatten a tree-like sequence, and you expect it to return the &quot;leaves&quot; of that tree.&lt;/p&gt;&lt;p&gt;Here's the source of tree-seq:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn tree-seq
  &amp;#91;branch? children root&amp;#93;
  &amp;#40;let &amp;#91;walk &amp;#40;fn walk &amp;#91;node&amp;#93;
               &amp;#40;lazy-seq
                &amp;#40;cons node
                      &amp;#40;when &amp;#40;branch? node&amp;#41;
                        &amp;#40;mapcat walk &amp;#40;children node&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#93;
    &amp;#40;walk root&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tree-seq takes three arguments: a predicate function, a function, and a sequence. These parameters are called branch?, children, and root.&lt;/p&gt;&lt;p&gt;The first value in the lazy-sequence is the input value. Then we check if the input value is a branch with the branch? predicate. If it is, we call the children function on it to get its children, and keep &quot;walking&quot; the function recursively. If it isn't, return nil, so that the highest level of the recursive calls can return a sensible list.&lt;/p&gt;&lt;p&gt;So tree-seq returns all of the branches and all of the leaves, as determined by the branch? and children functions. In flatten, we are expecting a sequence of sequences; thus, the branch? predicate is sequential, and the children function is seq. (We'll get to the rest of its source in a moment.) You'll recognize that both of these were used in the other flatten solutions.&lt;/p&gt;&lt;p&gt;Let's look at the result of calling tree-seq with sequential?, seq, and our simplest possible case:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def result &amp;#40;tree-seq sequential? seq simplest-possible-case&amp;#41;&amp;#41;
result
; =&amp;gt; &amp;#40;&amp;#40;1 2 &amp;#40;3&amp;#41; 4 5&amp;#41; 1 2 &amp;#40;3&amp;#41; 3 4 5&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Woah! That result looks a little weird, and it sure isn't flat. But it does look like all of the branches (including the input value), and all of the leaves.&lt;/p&gt;&lt;p&gt;With flatten, we just want the leaves, or all the atoms. So this would be the obvious thing to do:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;filter atom? result&amp;#41;
; =&amp;gt; &amp;#40;1 2 3 4 5&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That works great! But since we know that the very first item in the list will be the un-flattened input value, we can call rest on the result first, without losing any leaves:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;filter atom? &amp;#40;rest result&amp;#41;&amp;#41;
; =&amp;gt; &amp;#40;1 2 3 4 5&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Same return value, but this is presumably more efficient. And that, my friends, is how Hickey &amp; co. implement flatten!:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn flatten &amp;#91;x&amp;#93;
  &amp;#40;filter &amp;#40;complement sequential?&amp;#41;
          &amp;#40;rest &amp;#40;tree-seq sequential? seq x&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Aw yeah!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/files/sting-success.jpg&quot; alt=&quot;Success!&quot; /&gt;&lt;/p&gt;&lt;p&gt;What else could we use tree-seq for? At this point, it should be pretty easy to implement a function that is the opposite of flatten:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defn branches &amp;#91;x&amp;#93; &amp;#40;filter sequential? &amp;#40;tree-seq sequential? seq x&amp;#41;&amp;#41;&amp;#41;

&amp;#40;branches simplest-possible-case&amp;#41;
; =&amp;gt; &amp;#40;&amp;#40;1 2 &amp;#40;3&amp;#41; 4 5&amp;#41; &amp;#40;3&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It's not immediately obvious to me what you might use that for. I did think of another use of tree-seq that might actually come in handy: finding all of the values in a series of nested maps. Here's how:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def nested-map {:a {:b {:c {:d 4}}} :e {:f 6}}&amp;#41;

&amp;#40;defn all-vals 
  &amp;#91;m&amp;#93;
  &amp;#40;remove map? &amp;#40;rest &amp;#40;tree-seq map? vals m&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;all-vals nested-map&amp;#41;
; =&amp;gt; &amp;#40;6 4&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we've read and evaluated several solutions of flatten, including Clojure core's solution. And we have a new Clojure core function under our belts.&lt;/p&gt;&lt;p&gt;You might be interested in checking out &lt;a href='crossclj.info/fun/clojure.core/tree-seq.html'&gt;some other uses of tree-seq&lt;/a&gt;. It's used in two other core Clojure functions, and a handful of libraries. And who knows! You or I might make one of those libraries one day.&lt;/p&gt;&lt;p&gt;One last thing: it's true that flatten and tree-seq are unrelated to that wonderful film &quot;The Sting.&quot; But the real Sting is that all of this came about by way of trying to solve Lewis Carroll's / Carin Meier's &quot;&lt;a href='https://github.com/gigasquid/wonderland-clojure-katas/tree/master/doublets'&gt;Doublets&lt;/a&gt;&quot; kata, and I have yet to solve it.&lt;/p&gt;&lt;p&gt;Perhaps my friend is right, though, and thinking about flatten will help a solution emerge...&lt;/p&gt;
</description>
<pubDate>
Sat, 20 Dec 2014 00:00:00 -0500
</pubDate>
<author>
Michael Fogleman
</author>
</item>
<item>
<guid>
http://mwfogleman.github.io/posts/20-12-2014-first-post.html
</guid>
<link>
http://mwfogleman.github.io/posts/20-12-2014-first-post.html
</link>
<title>
First post
</title>
<description>
&lt;p&gt;This is my first post in my new technical blog, &quot;rejoyce.&quot; I'm a real coder now that I have one of these things!&lt;/p&gt;&lt;p&gt;In case it's not obvious, I'm using the swanky new static blog generator, &lt;a href='https://lacarmen.github.io/cryogen/index.html'&gt;Cryogen&lt;/a&gt;. I haven't (yet) figured out much about how to theme these darn &quot;web-page&quot; things you new-fangled kids have dreamed up. But having nothing fancy to wear is no excuse to skip a party, so here I am.&lt;/p&gt;&lt;p&gt;Be sure to check out the &quot;About&quot; page for some clues as to what I'll be posting about (hint: this hint has parentheses in it).&lt;/p&gt;
</description>
<pubDate>
Sat, 20 Dec 2014 00:00:00 -0500
</pubDate>
<author>
Michael Fogleman
</author>
</item>
</channel>
</rss>
